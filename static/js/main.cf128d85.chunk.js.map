{"version":3,"sources":["images/spaceShip1_1920.jpg","components/Score.js","components/Card1.js","components/Card2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Score","props","className","result","useStyles","makeStyles","card","maxWidth","bullet","display","margin","transform","title","fontSize","color","player","marginLeft","pos","marginBottom","starShipName","qutation","fontStyle","SimpleCard","classes","bull","Card","CardContent","Typography","gutterBottom","variant","component","spaceShipName","numberOfCrew1","numberOfCrew2","App","handleDraw","state","crew","name","c1","c2","id1","Math","floor","random","length","id2","result1","Number","result2","name1","name2","count1","setState","WinFlag","crewP1","crewP2","nameP1","nameP2","count2","handleStartGame","spaceShipCrew","all","map","s","hiddenPlayComponentFlag","handleEndGame","fetch","then","res","json","results","this","style","backgroundImage","spaceship","backgroundSize","overflow","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf128d85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spaceShip1_1920.ea69c3d7.jpg\";","import React from 'react';\r\n\r\nconst Score = (props) => {\r\n    return (\r\n        <div className=\"scorePlayerName\" >\r\n            {props.result}\r\n        </div>);\r\n}\r\n\r\nexport default Score;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { green } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        maxWidth: 500,\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n        // fontSize: 12,\r\n    },\r\n    title: {\r\n        fontSize: 22,\r\n        color: \"blue\",\r\n    },\r\n    player: {\r\n        color: \"lightblue\",\r\n        fontSize: 22,\r\n        marginLeft: 20,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n        fontSize: 20\r\n    },\r\n    starShipName: {\r\n        color: \"red\",\r\n        margin: 20,\r\n    },\r\n    qutation: {\r\n        fontStyle: \"italic\"\r\n    },\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n    const classes = useStyles();\r\n    const bull = <span className={classes.bullet}>•</span>;\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    Player{bull}One\r\n        </Typography>\r\n                <Typography className={classes.player} color=\"textSecondary\" gutterBottom>\r\n                    LUKE SKYWALKER\r\n        </Typography>\r\n                <Typography variant=\"h7\" component=\"h2\"  >\r\n                    Starship{bull}Class :\r\n                </Typography>\r\n                <Typography className={classes.starShipName} variant=\"h6\" component=\"h2\"  >\r\n                    {props.spaceShipName}\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                    {`# people in the CREW  : `}\r\n                    {props.numberOfCrew1}\r\n                </Typography>\r\n                <Typography className={classes.qutation} variant=\"body2\" component=\"p\">\r\n                    {'\"You must unlearn what you have learned.\"'}\r\n                    <br />\r\n                    - said Master Yoda\r\n                </Typography>\r\n            </CardContent>\r\n            {/* <CardActions>\r\n                <Button size=\"small\">Learn More</Button>\r\n            </CardActions> */}\r\n        </Card >\r\n    );\r\n}\r\n\r\n//-------------------------\r\n\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        maxWidth: 500,\r\n\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n        // fontSize: 12,\r\n    },\r\n    title: {\r\n        fontSize: 22,\r\n        color: \"green\",\r\n    },\r\n    player: {\r\n        color: \"lightgreen\",\r\n        fontSize: 22,\r\n        marginLeft: 20,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n        fontSize: 20\r\n    },\r\n    starShipName: {\r\n        color: \"red\",\r\n        margin: 20,\r\n    },\r\n    qutation: {\r\n        fontStyle: \"italic\"\r\n    },\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n    const classes = useStyles();\r\n    const bull = <span className={classes.bullet}>•</span>;\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    Player{bull}Two\r\n        </Typography>\r\n                <Typography className={classes.player} color=\"textSecondary\" gutterBottom>\r\n                    OBI-WAN\r\n        </Typography>\r\n                <Typography variant=\"h7\" component=\"h2\"  >\r\n                    Starship{bull}Class :\r\n                </Typography>\r\n                <Typography className={classes.starShipName} variant=\"h6\" component=\"h2\"  >\r\n                    {props.spaceShipName}\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                    {`# people in the CREW  : `}\r\n                    {props.numberOfCrew2}\r\n                </Typography>\r\n                <Typography className={classes.qutation} variant=\"body2\" component=\"p\">\r\n                    '\"May the Force be with you\"'\r\n          <br />\r\n                    -  Obi-Wan\r\n                </Typography>\r\n            </CardContent>\r\n            {/* <CardActions>\r\n                <Button size=\"small\">Learn More</Button>\r\n            </CardActions> */}\r\n        </Card >\r\n    );\r\n}\r\n","import React, { Component } from 'react';\nimport Score from './components/Score'\nimport Card1 from './components/Card1'\nimport Card2 from './components/Card2'\nimport spaceship from './images/spaceShip1_1920.jpg'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crewP1: 0,  // Number of people in crew\n      crewP2: 0,  // Number of people in crew\n\n      nameP1: \"\",\n      nameP2: \"\",\n\n      all: ['initial value on start'], // array of alll data from API\n      crew: [], // array of  crews's numbers  \n      name: [], // array of  SpaceCrafts's names\n\n      c1: 0,\n      c2: 0,\n\n      hiddenPlayComponentFlag: true,\n      WinFlag: \"Please press 'START GAME' button\",\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://swapi.co/api/starships/\")\n      .then(res => res.json())\n      .then(json => this.setState({ all: json.results }));\n\n\n    // console.log('---------------------')\n    // console.log(`CDM()`)\n    // console.log(`CDM this.state.all : ${this.state.all}`)\n  }\n\n  handleDraw = () => {\n    const { crew, name, c1, c2 } = this.state\n\n    const id1 = Math.floor(Math.random() * crew.length)\n    const id2 = Math.floor(Math.random() * crew.length)\n\n    const result1 = Number(crew[id1])\n    const result2 = Number(crew[id2])\n\n    // console.log(`result1: ${result1}`)\n    // console.log(`result2: ${result2}`)\n\n    const name1 = name[id1]\n    const name2 = name[id2]\n\n    // console.log(`name1: ${name1}`)\n    // console.log(`name2: ${name2}`)\n\n    if (result1 > result2) {\n      let count1 = c1\n      count1++\n      this.setState({\n        WinFlag: \"THE WINNER: Player One\", crewP1: result1, crewP2: result2,\n        nameP1: name1, nameP2: name2, c1: count1\n      })\n\n    } else if (result1 < result2) {\n      let count2 = c2\n      count2++\n      this.setState({\n        WinFlag: \"THE WINNER: Player Two\", crewP1: result1, crewP2: result2,\n        nameP1: name1, nameP2: name2, c2: count2\n      })\n\n    } else if (result1 === result2) {\n      let count1 = c1\n      count1++\n      let count2 = c2\n      count2++\n      this.setState({\n        WinFlag: \"-- DRAW --\", crewP1: result1, crewP2: result2,\n        nameP1: name1, nameP2: name2, c1: count1, c2: count2\n      })\n    }\n  }\n\n  handleStartGame = () => {\n    const spaceShipCrew = [...this.state.all].map(s => s.crew)\n    const spaceShipName = [...this.state.all].map(s => s.name)\n    this.setState({ crew: spaceShipCrew, name: spaceShipName, hiddenPlayComponentFlag: false, WinFlag: \"\" })\n\n    // console.log([...this.state.all])\n    // console.log(spaceShipName)\n  }\n\n  handleEndGame = () => {\n    const { c1, c2 } = this.state\n    this.setState({ hiddenPlayComponentFlag: true, crewP1: 0, crewP2: 0, nameP1: \"\", nameP2: \"\", c1: 0, c2: 0 })\n  }\n\n\n\n  render() {\n    const { all, WinFlag, crewP1, crewP2, nameP1, nameP2, hiddenPlayComponentFlag, c1, c2 } = this.state\n\n    // console.log(`Counter One: ${c1}`)\n    // console.log(`Counter Two: ${c2}`)\n    // console.log('render()')\n    // console.log(`render() this.state.all: ${all}`)\n    // console.log(`RENDER WIN FLAG: ${WinFlag}`)\n    // console.log(`RENDER crewP1 : ${crewP1}`)\n    // console.log(`RENDER crewP1: ${crewP2}`)\n\n\n    return (\n      <div className=\"App\" style={{ backgroundImage: `url(${spaceship})`, backgroundSize: \"cover\", overflow: \"hidden\" }}>\n\n        {/* ====== TITLE ========= */}\n        <div className=\"title\">Star Wars GAME</div>\n        <div className=\"subtitle\">Starships Challenge ...</div>\n        <hr />\n\n        {/* ========= START GAME =========== */}\n        <div>{hiddenPlayComponentFlag ? <button className=\"StartGameBtn\" onClick={this.handleStartGame}>START GAME</button> : <button className=\"EndGameBtn\" onClick={this.handleEndGame}>Click ! to FINISH GAME</button>}</div>\n\n        {/* ======== TURNS HANDLE ========= */}\n        <div className=\"play\">{!hiddenPlayComponentFlag ? <button className=\"playBtn\" onClick={this.handleDraw}>PLAY</button> : null}</div>\n\n        {/* ======== DISPLAY WINNER ============ */}\n        <div className=\"score\"><Score result={WinFlag} /></div>\n\n        {/* ========== CARDS PAYLOADS ============ */}\n        <div className=\"card1\"><Card1 numberOfCrew1={crewP1} spaceShipName={nameP1} /></div>\n        <div className=\"card2\"><Card2 numberOfCrew2={crewP2} spaceShipName={nameP2} /></div>\n\n        {/* ========= SCORE COUNTERS =========== */}\n        <div className=\"sume_up1\">{`Palyer One: ${c1}`}</div>\n        <div className=\"sume_up2\" >{`Palyer Two: ${c2}`}</div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}